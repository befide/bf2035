---
import { get, getOrganizationRoots, getOrganizations } from '@/utils';
import fastCartesian from 'fast-cartesian';
import { getLangFromUrl, useTranslations } from 'src/i18n/utils';

import MemberIcon from './MemberIcon.astro';

import {
  careerLevels,
  genders,
  disciplinaryProfessions
} from '@/content.config.organizations';
import { flattenTreeNodes } from '@/utils/content.tree';

const t = useTranslations(getLangFromUrl(Astro.url));

const product = fastCartesian([
  [...careerLevels],
  [...disciplinaryProfessions],
  [...genders]
]);

let { rootId } = Astro.props;

const organizations = await getOrganizations(rootId);
const organizationRoots = getOrganizationRoots(organizations);
const list = flattenTreeNodes(organizationRoots);
---

<table class="tree-table">
  <thead>
    <tr>
      <th></th><th></th>
      <th>total</th>
      {
        careerLevels.map((d) => (
          <th>
            <span>{t(['careerLevel', d, 'short'].join('.'))}</span>
            <MemberIcon careerLevel={d} />
          </th>
        ))
      }
      {
        disciplinaryProfessions.map((d) => (
          <th>
            <span>{d}</span>
            <MemberIcon disciplinaryProfession={d} />
          </th>
        ))
      }
      {
        genders.map((d) => (
          <th>
            <span>{d}</span>
            <MemberIcon gender={d} />
          </th>
        ))
      }
    </tr>
    <tr>
      <th>Name</th>
      <th>members</th>
      <th colspan="13">members recursive count</th>
    </tr>
  </thead>
  <tbody>
    {
      list.map((item) => (
        <tr
          data-depth={item.depth}
          data-child-index={item.childIndex}
          data-has-children={item.children.length > 0}
        >
          <td class="tree-table__name tree-table__indent">
            {(item.children.length > 0) && 
            <input
              id={'collapsible-' + item.depth + '-' + item.childIndex}
              class="toggle"
              checked="checked"
              type="checkbox"
            />
            <label
              for={'collapsible-' + item.depth + '-' + item.childIndex}
              class="lbl-toggle"
            >
              <span>{item.data.label.fullName.en}</span>
            </label>

            }
            {!(item.children.length > 0) && 
              <span>{item.data.label.fullName.en}</span>
            }
           
          </td>
          <td>
            {product
              .filter((p) => get(item.data.uniquePeopleCount, p.join('.')))
              .map((p) =>
                new Array(get(item.data.uniquePeopleCount, p.join('.')))
                  .fill(0)
                  .map(() => (
                    <MemberIcon
                      careerLevel={p[0]}
                      disciplinaryProfession={p[1]}
                      gender={p[2]}
                    />
                  ))
              )}
          </td>
          <td class="number">
            {item.data.uniquePeopleCountRecursiveSum.total}
          </td>
          {careerLevels.map((d) => (
            <td class="number">
              {get(item.data.uniquePeopleCountRecursiveSum, d)}
            </td>
          ))}

          {disciplinaryProfessions.map((d) => (
            <td class="number">
              {get(item.data.uniquePeopleCountRecursiveSum, d)}
            </td>
          ))}

          {genders.map((d) => (
            <td class="number">
              {get(item.data.uniquePeopleCountRecursiveSum, d)}
            </td>
          ))}
        </tr>
      ))
    }
  </tbody>
</table>

<style>
  thead tr:first-child th {
    position: relative;
    height: 5rem;
    vertical-align: bottom;
  }
  thead tr:first-child th span {
    display: block;
    transform-origin: left bottom;
    position: absolute;
    font-weight: 300;

    transform: rotate(45deg) translate(calc(-100% - 1rem), 0rem);
  }
</style>

<style is:global>
  .tree-table tr:has(:not([checked='checked'])) > td {
  }
  .lbl-toggle {
    position: relative;
  }

  [data-has-children='true'] .lbl-toggle::before {
    content: ' ';
    display: inline-block;

    border-top: 5px solid transparent;
    border-bottom: 5px solid transparent;
    border-left: 5px solid currentColor;

    vertical-align: middle;
    margin-right: 0.25rem;
    transform: translateY(-2px);
    width: .5rem;
    height: .5rem;

    transition: transform 0.2s ease-out;
    position: absolute;
    top: .5rem;
    left: -1rem;
  }
  .toggle:checked + .lbl-toggle::before {
    transform: rotate(90deg) translateX(-3px);
  }

  .toggle:checked + .lbl-toggle {
    border-bottom-right-radius: 0;
    border-bottom-left-radius: 0;
  }
  .lbl-toggle:hover {
    color: #7c5a0b;
    cursor: pointer;
  }
  input[type='checkbox'] {
    display: none;
  }
  .tree-table {
    width: 100%;
  }
  td.tree-table__indent {
      width: 60%;
  }

  .tree-table td.number {
    text-align: right;
  }
  .tree-table tr[data-depth='1'] td {
    background-color: hsl(0, 0%, 100%);
  }
  .tree-table tr[data-depth='2'] td {
    background-color: hsl(0, 0%, 94%);
  }
  .tree-table tr[data-depth='3'] td {
    background-color: hsl(0, 0%, 92%);
  }
  .tree-table tr[data-depth='4'] td {
    background-color: hsl(0, 0%, 88%);
  }
  .tree-table tr[data-depth='5'] td {
    background-color: hsl(0, 0%, 84%);
  }
  .tree-table tr[data-depth='6'] td {
    background-color: hsl(0, 0%, 80%);
  }
  .tree-table tr[data-depth='0'] > td.tree-table__indent {
    padding-left: 1rem;
  }
  .tree-table tr[data-depth='1'] > td.tree-table__indent {
    padding-left: 2rem;
  }

  .tree-table tr[data-depth='2'] > td.tree-table__indent {
    padding-left: 3rem;
  }
  .tree-table tr[data-depth='3'] > td.tree-table__indent {
    padding-left: 4rem;
  }
  .tree-table tr[data-depth='4'] > td.tree-table__indent {
    padding-left: 5rem;
  }
  .tree-table tr[data-depth='5'] > td.tree-table__indent {
    padding-left: 6rem;
  }
  .tree-table tr[data-depth='6'] > td.tree-table__indent {
    padding-left: 7rem;
  }
  .tree-table td {
    padding-right: .5rem !important;
  }
</style>
