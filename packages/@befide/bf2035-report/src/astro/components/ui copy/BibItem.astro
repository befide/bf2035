---
import { getEntry } from 'astro:content';
import { Image } from 'astro:assets';
import Tag from './Tag.astro';

export interface Props {
  citeKey: string;
  locator?: string;
  withTags?: Boolean;
}
const { citeKey, withTags = false } = Astro.props;

const item = await getEntry('references', citeKey);

const defaultAsset = '/src/astro/assets/bib-icons/note.png';
const iconDictionary = new Map<string, string>([
  ['book', '/src/astro/assets/bib-icons/book.png'],
  ['chapter', '/src/astro/assets/bib-icons/bookSection.png'],
  ['report', '/src/astro/assets/bib-icons/report.png'],
  ['software', '/src/astro/assets/bib-icons/computerProgram.png'],
  ['article-journal', '/src/astro/assets/bib-icons/journalArticle.png'],
  ['post-weblog', '/src/astro/assets/bib-icons/blogPost.png'],
  ['webpage', '/src/astro/assets/bib-icons/webpage.png'],
  ['thesis', '/src/astro/assets/bib-icons/thesis.png'],
  ['paper-conference', '/src/astro/assets/bib-icons/conferencePaper.png'],
  ['manuscript', '/src/astro/assets/bib-icons/manuscript.png'],
  ['entry-encyclopedia', '/src/astro/assets/bib-icons/encyclopediaArticle.png'],
  ['article-magazine', '/src/astro/assets/bib-icons/magazineArticle.png'],
  ['motion_picture', '/src/astro/assets/bib-icons/videoRecording.png'],
  ['speech', '/src/astro/assets/bib-icons/note.png'],
  ['document', '/src/astro/assets/bib-icons/note.png'],
  ['dataset', '/src/astro/assets/bib-icons/note.png'],
  ['broadcast', '/src/astro/assets/bib-icons/note.png'],
]);

const icons = import.meta.glob<{ default: ImageMetadata }>(
  '/src/astro/assets/bib-icons/*.{jpeg,jpg,png,gif}'
);

const iconPath = iconDictionary.get(item.data.cslItem.type) || defaultAsset;
const icon = icons[iconPath];

if (!icon)
  throw new Error(
    `"${iconPath}" does not exist in glob: "/src/assets/bib-icons/*.{jpeg,jpg,png,gif}". See ImageComponent.astro to debug.`
  );
---

{
  item && (
    <li class={'md bib-item ' + item.data.cslItem.type}>
      {withTags && (
        <ul class="tags">
          {item.data.tags?.map((tag: string) => (
            <li>
              <Tag tag={tag} />
            </li>
          ))}
        </ul>
      )}
      <span class="bib-item__icon">
        <Image
          src={icon()}
          width="20"
          height="20"
          alt={'ICON: ' + item.data.cslItem.type}
        />
      </span>
      <span
        class="bib-ref__bibliography"
        set:html={item.data.rendered.bibliography}
      />
    </li>
  )
}

<style lang="stylus" is:global>
.bib-item {
  // min-height: 2rem;
  padding-left: 2rem;
  margin-bottom: 1rem;
  position: relative;
}

.bib-item a {
  word-break: break-all;
  text-decoration: underline;
}

.bib-item .title {
  font-weight: bold;
  color: gray;
}

.bib-item__icon {
  position: absolute;
  left: 0;
}

.bib-ref__error {
  color: red;
}

.bib-ref__citation {
  // font-weight: bold;
  text-decoration: underline dotted;
  color: black;
}

.bib-ref__container .bib-ref__citation, .bib-ref__container .bib-ref__bibliography {
  background-color: var(--color-hoverable);
  cursor: pointer;
  display: inline;
}

.bib-ref__container {
  background-color: var(--color-hoverable);
}

.bib-ref__container .bib-ref__citation {
  display: inline;
}

.bib-ref__container .bib-ref__bibliography {
  display: none;
}

.bib-ref__container.open .bib-ref__citation {
  display: none;
}

.bib-ref__container.open .bib-ref__bibliography {
  display: inline;
}

.csl-bib-body, .csl-entry {
  display: inline;
}

ul.bib-list li:before {
  display: none !important;
}

.tags li {
  display: inline;
  
}
</style>
