---

import { getEntry } from "astro:content";

export interface Props {
  citeKey: string;
  locator?: string;
  withTags?: Boolean;
}
const { citeKey, locator, withTags = false } = Astro.props;

const item = await getEntry("references", citeKey);

// const defaultAsset = "../assets/bib-icons/note.png";
// const iconDictionary = new Map<string, string>([
//   ["book", "../assets/bib-icons/book.png"],
//   ["chapter", "../assets/bib-icons/bookSection.png"],
//   ["report", "../assets/bib-icons/report.png"],
//   ["software", "../assets/bib-icons/computerProgram.png"],
//   ["article-journal", "../assets/bib-icons/journalArticle.png"],
//   ["post-weblog", "../assets/bib-icons/blogPost.png"],
//   ["webpage", "../assets/bib-icons/webpage.png"],
//   ["thesis", "../assets/bib-icons/thesis.png"],
//   ["paper-conference", "../assets/bib-icons/conferencePaper.png"],
//   ["manuscript", "../assets/bib-icons/manuscript.png"],
//   ["entry-encyclopedia", "../assets/bib-icons/encyclopediaArticle.png"],
//   ["article-magazine", "../assets/bib-icons/magazineArticle.png"],
//   ["motion_picture", "../assets/bib-icons/videoRecording.png"],
//   ["speech", "../assets/bib-icons/note.png"],
//   ["document", "../assets/bib-icons/note.png"],
//   ["dataset", "../assets/bib-icons/note.png"],
//   ["broadcast", "../assets/bib-icons/note.png"],
// ]);

// const collections = [];
// item.data.tags
//   ?.filter(({ scope }) => scope === "collection")
//   .flatMap((t) => t.value.split("/"));

// const images = import.meta.glob("../assets/bib-icons/**.png", {
//   import: "default",
//   eager: true
// });

// const imagesrc = images["book"];
//   iconDictionary.get("book") || defaultAsset
// ]
---

{
  item && (
    <span class="bib-ref">
      {withTags && (
        <ul class="collections">
          <!--{collections?.map((collection) => (-->
          <!--  <li class="collection pill">{collection}</li>-->
          <!--))}-->
        </ul>
      )}

      <span class="bib-ref__bibliography" set:html={item} />
      <span class="bib-ref__locator" set:html={locator} />
    </span>
  )
}

{!item && <span class="bib-ref-eror">Invalid {citeKey} not found</span>}

---
{
    item &&

  <li class={"bib-item " + item.data.cslItem.type}>
    <span class="bib-item__icon">
      <!-- <Image
        src={imagesrc}
        width="20"
        height="20"
        alt={"ICON: " + item.data.cslItem.type}
      /> -->
    </span>
    <span
      class="bib-ref__bibliography"
      set:html={item.data.rendered.bibliography}
    />
  </li>
    }
<style lang="stylus" is:global>
.bib-item
  min-height 2rem
  padding-left 2rem
  margin-bottom 1rem
  position: relative;
  a
    word-break: break-all
    text-decoration underline

  // a::after
  //   content " " attr(href)






  .title
    font-weight: bold;
    color gray










.bib-item__icon
  position: absolute;
  left 0

.bib-ref__error {
  color: red;
}

.bib-ref__citation {
  // font-weight: bold;
  text-decoration: underline dotted;
  color: black;
}

.bib-ref__container .bib-ref__citation, .bib-ref__container .bib-ref__bibliography {
  background-color: var(--color-hoverable);
  cursor: pointer;
  display: inline;
}

.bib-ref__container {
  background-color: var(--color-hoverable);
}

.bib-ref__container .bib-ref__citation {
  display: inline;
}

.bib-ref__container .bib-ref__bibliography {
  display: none;
}

.bib-ref__container.open .bib-ref__citation {
  display: none;
}

.bib-ref__container.open .bib-ref__bibliography {
  display: inline;
}

.csl-bib-body, .csl-entry {
  display: inline;
}



ul.bib-list li:before {
  display: none !important
}



</style>
