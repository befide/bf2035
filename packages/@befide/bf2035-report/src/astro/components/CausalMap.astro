---
import type { ElementDefinition, ElementsDefinition } from "cytoscape";

/** eslint-disable @typescript-eslint/no-unused-vars */

export interface Props {
  elements:
    | ElementsDefinition
    | ElementDefinition[]
    | Promise<ElementsDefinition>
    | Promise<ElementDefinition[]>;
  filter?: string;
}

const { filter } = Astro.props;
---

<div id="cytoscape-container" data-filter={filter}></div>

<script>
  import cytoscape from "cytoscape";
  import { color } from "@utils/getCausalMap";
  import type { EdgeSingular, NodeSingular } from "cytoscape";
  // import cise from "cytoscape-cise";

  // import collapse from "cytoscape-expand-collapse";
  // import graphml from "cytoscape-graphml";

  // import { BubbleSetsPlugin } from "cytoscape-bubblesets";
  import { settings } from "../utils/settingsStore.js";

  async function init() {
    const containerElement = document.getElementById("cytoscape-container");
    const lineheight = settings.get().printPreview ? 14 : 14;

    const elements = await fetch("/dynamics-model.json").then((res) =>
      res.json(),
    );

    const filter =
      new Set(containerElement?.dataset.filter?.split(",")) || new Set();

    const cy = cytoscape({
      container: containerElement,
      elements: elements,

      style: [
        {
          selector: "node",
          style: {
            opacity: 0.2,
            color: function (node: NodeSingular) {
              return color(node.data("cluster"), 100);
            },
            "border-color": function (node) {
              return color(node.data("cluster"), 700);
            },
            "background-color": function (node) {
              return color(node.data("cluster"), 100);
            },

            label: "data(label)",
         

            "text-wrap": "wrap",
            "text-max-width": 3 * lineheight + "px",

            "line-height": 1,
            "font-family": "Barlow Condensed",
            "font-size": 6,

            
            "border-opacity": 0.1,
            "border-width": 1,

            "text-valign": "center",
            "text-halign": "center",

            width: 3 * lineheight,
            height: 2 * lineheight,
          },
        },
        {
          selector: "node.mission, node.mission.selected",
          style: {


            "border-style": "double",
            "border-width": 5,

            "font-size": 9,
            "font-weight": "bold",
            "text-max-width": 3.5 * lineheight + "px",
            height: 4 * lineheight,
            shape: "round-rectangle",
            width: 4 * lineheight,
          },
        },
        {
          selector: "node.variable",
          style: {
            shape: "round-rectangle",
            color: function (node: NodeSingular) {
              return color(node.data("cluster"), 800);
            },
            // "border-color": (node) => color(node.data("cluster"), 700),
            // "background-color": (node) => color(node.data("cluster"), 100),
          },
        },

        {
          selector: "node.cluster",
          style: {
            "background-color": function (node: NodeSingular) {
              return color(node.data("id"), 200);
            },
            "border-color": function (node: NodeSingular) {
              return color(node.id(), 200);
            },
            label: "data(label)",
            "text-valign": "top",
            // text_halign: 'center',
            "font-size": 12,
            "text-max-width": 8.5 * lineheight + "px",
          },
        },
        {
          selector: "node.main_variable",
          style: {
            "font-weight": "bold",
            color: function (node: NodeSingular) {
              return color(node.data("cluster"), 100);
            },
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            "border-color": () => "white", //color(node.data("cluster"), 100),
            "background-color": function (node: NodeSingular) {
              return color(node.data("cluster"), 500);
            },

            shape: "ellipse",
          },
        },
        {
          selector: "node.action",
          style: {
            shape: "round-rectangle",
            width: 3 * lineheight,
            height: 2 * lineheight,
            color: function (node: NodeSingular) {
              return color(node.data("cluster"), 700);
            },
            "border-opacity": 0.9,
            "border-width": "2",
            "border-color": function (node: NodeSingular) {
              return color(node.data("cluster"), 700);
            },
            "background-color": function (node: NodeSingular) {
              return color(node.data("cluster"), 100);
            },
            "text-max-width": 3 * lineheight + "px",
          },
        },

        {
          selector: "edge",
          style: {
            "overlay-color": "#333333",
            "overlay-padding": 0,
            "overlay-opacity": 1,

            width: 2,
            opacity: function (e: EdgeSingular) {
              return e.source().hasClass("selected") ? 1 : 0;
            },

            "line-color": "#333333",
            "line-style": function (e: EdgeSingular) {
              return e.data("type") === "negative" ? "dotted" : "solid";
            },
            "target-arrow-color": "#333333",
            "arrow-scale": 0.9,
            "target-arrow-shape": "triangle",
            // "curve-style": (e) =>
            // e.source().parent() || e.target().parent() ? "straight" : "taxi",
            "curve-style": function (e: EdgeSingular) {
              return e.source().data("cluster") === e.target().data("cluster")
                ? "straight"
                : "unbundled-bezier";
            },

          },
        },
        {
          selector: "node.selected",
          style: {
            opacity: 1,
            "text-opacity": 1,
          },
        },
      ],

      layout: {
        name: "preset",

        // ...fcoseOptions,
      },
      zoom: 1,
      pan: {
        x: 0 * lineheight,
        y: ((12 * 3 + 1.5) * lineheight) / 1,
      },
      // fit: true,
      pixelRatio: 5,
      minZoom: 1e-10,
      maxZoom: 1e10,
      zoomingEnabled: false,
    });

    const updateFilter = () => {
      const selectedComponents = cy.filter((ele) => {
        return (
          filter.size === 0 ||
          Array.from(filter).find((f) => ele.id().indexOf(f) > -1) != null
        );
      });
      cy.elements().removeClass("selected");
      cy.elements().bfs({
        roots: selectedComponents,
        visit: function (v) {
          v.addClass("selected");
        },
        directed: true,
      });
    };

    // cy.on("mouseover", (event) => {
    //   if (event.target.group && event.target.group() === "nodes") {
    //     filter.add(event.target.id());

    //     updateFilter();
    //   }
    // });

    // cy.on("mouseout", (event) => {
    //   if (event.target.group && event.target.group() === "nodes") {
    //     filter.delete(event.target.id());
    //     updateFilter();
    //   }
    // });

    cy.on("tapend", (event) => {
      if (event.target[0] && event.target[0].parent().length) {
        const i_x = +((2 * event.position.x) / lineheight).toFixed() / 2;
        const i_y = +((2 * event.position.y) / lineheight).toFixed() / 2;

        event.target[0].position({
          x: i_x * lineheight,
          y: i_y * lineheight,
        });
        // console.log({ label: event.target[0].data("id"), i_x, i_y });
      }
    });

    cy.ready(() => {
      const types = new Set(cy.nodes().map((n) => n.data("type")));
      types.forEach((t) => {
        cy.filter((ele) => ele.data("type") === t).addClass(t);
      });

      updateFilter();
      // const clusters = new Set(cy.nodes().map((n) => n.data("cluster")));

      // console.log(cy.graphml())
      // const bb = new BubbleSetsPlugin(cy);
      // clusters.forEach((cluster) => {
      //   bb.addPath(
      //     cy.filter(
      //       (ele, i, eles) =>
      //         (ele.data("type") === "main_variable" ||
      //           ele.data("type") === "variable" ||
      //           ele.data("type") === "mission") &&
      //         ele.data("cluster") === cluster,
      //     ),
      //     cy.edges().filter((edge) => {
      //       return (
      //         edge.source().data("cluster") === cluster &&
      //         edge.target().data("cluster") === cluster
      //       );
      //     }),
      //     null,
      //     {
      //       className: cluster,
      //       virtualEdges: true,
      //       style: {
      //         fill: color(cluster, 100), // `color(cluster),
      //         stroke: color(cluster, 200),
      //       },
      //       includeLabels: false,
      //       includeMainLabels: false,
      //       includeOverlays: false,
      //       includeSourceLabels: false,
      //       includeTargetLabels: false,
      //     },
      //   );
      // });
    });
  }
  window.addEventListener("load", init);
  window.addEventListener("astro:after-swap", init);
</script>

<style is:global>
  #cytoscape-container {
    width: 49rem;
    height: 50rem;
  }
</style>
